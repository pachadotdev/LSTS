% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsts_hm.R
\name{lsts_hm}
\alias{lsts_hm}
\title{Hessian Matrix}
\usage{
lsts_hm(f, x0, ...)
}
\arguments{
\item{f}{(type: numeric) name of function that defines log likelihood
(or negative of it).}

\item{x0}{(type: numeric) scalar or vector of parameters that give the point
at which you want the hessian estimated (usually will be the mle).}

\item{...}{Additional arguments to be passed to the function.}
}
\value{
An \code{n x n} matrix of 2nd derivatives, where \emph{n} is the length of
\code{x0}.
}
\description{
Plots in 3D the smoothing periodogram of a time series,
by blocks or windows.
}
\details{
Computes numerical approximation to Hessian of \code{f}, evaluated at
\code{x0}.
Usually needs to pass additional parameters (e.g. data).  N.B. this uses no
numerical sophistication.
}
\examples{
# Examples for CRAN checks:
# Executable in < 5 sec

## Ex 1: Variance of the maximum likelihood estimator for mu parameter in
## gaussian data

loglik <- function(series, x, sd = 1) {
  -sum(log(dnorm(series, mean = x, sd = sd)))
}

n <- 500

series <- rnorm(500, mean = 10, sd = 2)

sqrt(c(var(series) / n, diag(solve(lsts_hm(
  f = loglik, x = mean(series), series = series,
  sd = sd(series)
)))))

## Ex 2: Variance of the maximum likelihood estimator for phi parameter AR(1)
## in gaussian data

loglik <- function(series, x, sd = 1) {
  n <- length(series)
  -(sum(log(dnorm(series[2:n], mean = x * series[1:(n - 1)], sd = sd))) +
    log(dnorm(series[1], mean = 0, sd = sqrt(sd^2 / (1 - x^2)))))
}

n <- 1000

series <- arima.sim(n, model = list(c(1, 0, 0), ar = 0.7))

fit <- arima(series, c(1, 0, 0), include.mean = FALSE)

round(
  c(fit$var.coef, diag(solve(lsts_hm(
    f = loglik, x = fit$coef, series = series,
    sd = sqrt(fit$sigma2)
  )))), 6
)

## Ex 3:  Variance of the whittle maximum likelihood estimator for phi
## parameter AR(1) in gaussian data

loglik <- function(series, x, sd = 1) {
  n <- length(series)
  aux <- lsts_periodogram(series, plot = FALSE)
  lambda <- aux$lambda
  I <- aux$periodogram
  f <- lsts_sd(ar = x, sd = sd, lambda = lambda)
  lik <- sum(log(f) + I / f)
  lik <- lik / n
}

n <- 500
series <- arima.sim(n, model = list(c(1, 0, 0), ar = 0.7))
fit <- arima(series, c(1, 0, 0), include.mean = FALSE)
round(c(fit$var.coef, diag(solve(lsts_hm(
  f = loglik, x = fit$coef, series = series,
  sd = sqrt(fit$sigma2)
))) / n), 4)
}
\seealso{
\code{\link{arima.sim}}
}
